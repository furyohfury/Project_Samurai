//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Units/Inputs and Animations/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Samurai
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""745f47f1-fc2b-4685-921f-6e4c4ae1ec8b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2b66b1e9-2da0-43e9-81e8-1fb3303c7c6a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""f86f8919-b842-4adc-8181-03871c773961"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BlueColor"",
                    ""type"": ""Button"",
                    ""id"": ""cff0ed7f-2416-4019-9add-c737a978e00d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RedColor"",
                    ""type"": ""Button"",
                    ""id"": ""9e806afb-cb39-432d-89d1-a00d20cd9a50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""d4d3aa28-b2e1-436e-ac5e-422c738815d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MeleeAttack"",
                    ""type"": ""Button"",
                    ""id"": ""81ebff83-5f2d-4764-9cd1-fbae9bf9991b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Move"",
                    ""id"": ""fa8861c9-4f0f-48b4-a24a-38cd2de1b939"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a236350b-1581-4bc7-bd4e-75f3c8cc908f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e464fd6f-5060-408e-805c-e9d413cf776a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fc5c5040-6597-43ad-ba02-371542523c20"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0851a1d5-2dc6-4a93-9c95-94535e7e877c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""af2d5de7-414c-468c-b01e-08ce323695a7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a2c94d6-f969-4c50-b573-b31a81abcbfb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RedColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3888261-6124-454c-80e4-92117521c811"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BlueColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba456af1-b320-4608-bea5-2c46be48aa7f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16944630-9468-42cd-b509-361f0e83d380"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MeleeAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIMap"",
            ""id"": ""46123b6c-c9d0-422f-90f2-d945df2c514c"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""0f3ff2e7-d00b-4d8c-b599-3b2f5b8c77e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99256181-9b42-4d05-8baa-5b20a96e0a82"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DoorMinigameMap"",
            ""id"": ""29a7e1e3-1942-4898-9f05-941d23239ae0"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""cd0a9cc1-dc09-4d23-abb4-039317291c7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b29c746a-fac7-4634-b31c-64eb993407f1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerMap
            m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
            m_PlayerMap_Movement = m_PlayerMap.FindAction("Movement", throwIfNotFound: true);
            m_PlayerMap_Shoot = m_PlayerMap.FindAction("Shoot", throwIfNotFound: true);
            m_PlayerMap_BlueColor = m_PlayerMap.FindAction("BlueColor", throwIfNotFound: true);
            m_PlayerMap_RedColor = m_PlayerMap.FindAction("RedColor", throwIfNotFound: true);
            m_PlayerMap_PickWeapon = m_PlayerMap.FindAction("PickWeapon", throwIfNotFound: true);
            m_PlayerMap_MeleeAttack = m_PlayerMap.FindAction("MeleeAttack", throwIfNotFound: true);
            // UIMap
            m_UIMap = asset.FindActionMap("UIMap", throwIfNotFound: true);
            m_UIMap_Pause = m_UIMap.FindAction("Pause", throwIfNotFound: true);
            // DoorMinigameMap
            m_DoorMinigameMap = asset.FindActionMap("DoorMinigameMap", throwIfNotFound: true);
            m_DoorMinigameMap_Action = m_DoorMinigameMap.FindAction("Action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerMap
        private readonly InputActionMap m_PlayerMap;
        private List<IPlayerMapActions> m_PlayerMapActionsCallbackInterfaces = new List<IPlayerMapActions>();
        private readonly InputAction m_PlayerMap_Movement;
        private readonly InputAction m_PlayerMap_Shoot;
        private readonly InputAction m_PlayerMap_BlueColor;
        private readonly InputAction m_PlayerMap_RedColor;
        private readonly InputAction m_PlayerMap_PickWeapon;
        private readonly InputAction m_PlayerMap_MeleeAttack;
        public struct PlayerMapActions
        {
            private @PlayerControls m_Wrapper;
            public PlayerMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerMap_Movement;
            public InputAction @Shoot => m_Wrapper.m_PlayerMap_Shoot;
            public InputAction @BlueColor => m_Wrapper.m_PlayerMap_BlueColor;
            public InputAction @RedColor => m_Wrapper.m_PlayerMap_RedColor;
            public InputAction @PickWeapon => m_Wrapper.m_PlayerMap_PickWeapon;
            public InputAction @MeleeAttack => m_Wrapper.m_PlayerMap_MeleeAttack;
            public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerMapActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @BlueColor.started += instance.OnBlueColor;
                @BlueColor.performed += instance.OnBlueColor;
                @BlueColor.canceled += instance.OnBlueColor;
                @RedColor.started += instance.OnRedColor;
                @RedColor.performed += instance.OnRedColor;
                @RedColor.canceled += instance.OnRedColor;
                @PickWeapon.started += instance.OnPickWeapon;
                @PickWeapon.performed += instance.OnPickWeapon;
                @PickWeapon.canceled += instance.OnPickWeapon;
                @MeleeAttack.started += instance.OnMeleeAttack;
                @MeleeAttack.performed += instance.OnMeleeAttack;
                @MeleeAttack.canceled += instance.OnMeleeAttack;
            }

            private void UnregisterCallbacks(IPlayerMapActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Shoot.started -= instance.OnShoot;
                @Shoot.performed -= instance.OnShoot;
                @Shoot.canceled -= instance.OnShoot;
                @BlueColor.started -= instance.OnBlueColor;
                @BlueColor.performed -= instance.OnBlueColor;
                @BlueColor.canceled -= instance.OnBlueColor;
                @RedColor.started -= instance.OnRedColor;
                @RedColor.performed -= instance.OnRedColor;
                @RedColor.canceled -= instance.OnRedColor;
                @PickWeapon.started -= instance.OnPickWeapon;
                @PickWeapon.performed -= instance.OnPickWeapon;
                @PickWeapon.canceled -= instance.OnPickWeapon;
                @MeleeAttack.started -= instance.OnMeleeAttack;
                @MeleeAttack.performed -= instance.OnMeleeAttack;
                @MeleeAttack.canceled -= instance.OnMeleeAttack;
            }

            public void RemoveCallbacks(IPlayerMapActions instance)
            {
                if (m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerMapActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerMapActions @PlayerMap => new PlayerMapActions(this);

        // UIMap
        private readonly InputActionMap m_UIMap;
        private List<IUIMapActions> m_UIMapActionsCallbackInterfaces = new List<IUIMapActions>();
        private readonly InputAction m_UIMap_Pause;
        public struct UIMapActions
        {
            private @PlayerControls m_Wrapper;
            public UIMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pause => m_Wrapper.m_UIMap_Pause;
            public InputActionMap Get() { return m_Wrapper.m_UIMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIMapActions set) { return set.Get(); }
            public void AddCallbacks(IUIMapActions instance)
            {
                if (instance == null || m_Wrapper.m_UIMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIMapActionsCallbackInterfaces.Add(instance);
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }

            private void UnregisterCallbacks(IUIMapActions instance)
            {
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
            }

            public void RemoveCallbacks(IUIMapActions instance)
            {
                if (m_Wrapper.m_UIMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIMapActions instance)
            {
                foreach (var item in m_Wrapper.m_UIMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIMapActions @UIMap => new UIMapActions(this);

        // DoorMinigameMap
        private readonly InputActionMap m_DoorMinigameMap;
        private List<IDoorMinigameMapActions> m_DoorMinigameMapActionsCallbackInterfaces = new List<IDoorMinigameMapActions>();
        private readonly InputAction m_DoorMinigameMap_Action;
        public struct DoorMinigameMapActions
        {
            private @PlayerControls m_Wrapper;
            public DoorMinigameMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Action => m_Wrapper.m_DoorMinigameMap_Action;
            public InputActionMap Get() { return m_Wrapper.m_DoorMinigameMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DoorMinigameMapActions set) { return set.Get(); }
            public void AddCallbacks(IDoorMinigameMapActions instance)
            {
                if (instance == null || m_Wrapper.m_DoorMinigameMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DoorMinigameMapActionsCallbackInterfaces.Add(instance);
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
            }

            private void UnregisterCallbacks(IDoorMinigameMapActions instance)
            {
                @Action.started -= instance.OnAction;
                @Action.performed -= instance.OnAction;
                @Action.canceled -= instance.OnAction;
            }

            public void RemoveCallbacks(IDoorMinigameMapActions instance)
            {
                if (m_Wrapper.m_DoorMinigameMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDoorMinigameMapActions instance)
            {
                foreach (var item in m_Wrapper.m_DoorMinigameMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DoorMinigameMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DoorMinigameMapActions @DoorMinigameMap => new DoorMinigameMapActions(this);
        public interface IPlayerMapActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnBlueColor(InputAction.CallbackContext context);
            void OnRedColor(InputAction.CallbackContext context);
            void OnPickWeapon(InputAction.CallbackContext context);
            void OnMeleeAttack(InputAction.CallbackContext context);
        }
        public interface IUIMapActions
        {
            void OnPause(InputAction.CallbackContext context);
        }
        public interface IDoorMinigameMapActions
        {
            void OnAction(InputAction.CallbackContext context);
        }
    }
}
